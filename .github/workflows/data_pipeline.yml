name: Warehouse Data Pipeline

on:
  schedule:
    - cron: '0 7 * * *'  # Ejecuta diariamente a las 7 AM UTC (2 AM hora de Colombia)
  workflow_dispatch:     # Permite ejecución manual

env:
  API_TOKEN: ${{ secrets.API_TOKEN }}
  API_BASE_URL: ${{ secrets.API_BASE_URL }}
  WAREHOUSE_CODES: "1145,1290"  # Códigos de almacenes a procesar

jobs:
  collect-and-store:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Límite de tiempo de ejecución

    steps:
    # Paso 1: Checkout del código
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para git push

    # Paso 2: Configurar Python
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Paso 3: Instalar dependencias
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas requests pyarrow

    # Paso 4: Ejecutar el script collector
    - name: Run Data Collector
      run: python api_collector.py

    # Paso 5: Subir datos como artefacto (opcional para backup)
    - name: Upload data as artifact
      uses: actions/upload-artifact@v4
      with:
        name: warehouse-transactions
        path: data/*.parquet
        retention-days: 3

    # Paso 6: Commit y push de los datos al repositorio
    - name: Commit and Push Data
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Agregar solo archivos de datos
        git add data/transactions_*.parquet
        
        # Verificar si hay cambios antes de commit
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Auto-update: Transaction data $(date +'%Y-%m-%d %H:%M')"
          git push
        else
          echo "No hay cambios en los datos para commit"
        fi

    # Paso 7: Notificación de estado (opcional)
    - name: Notify on success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ Pipeline ejecutado exitosamente! Datos actualizados.'
          })
